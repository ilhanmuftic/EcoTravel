{
	"info": {
		"_postman_id": "eeb62678-61c1-4221-9d39-be50466289c7",
		"name": "GreenScout",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39617713"
	},
	"item": [
		{
			"name": "Locations",
			"item": [
				{
					"name": "GET LOCATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json().results[0];",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('city');",
									"    pm.expect(responseData).to.have.property('lat');",
									"    pm.expect(responseData).to.have.property('lng');",
									"    pm.expect(responseData).to.have.property('created_at');",
									"    pm.expect(responseData).to.have.property('updated_at');",
									"    pm.expect(responseData).to.have.property('deleted_at');",
									"    pm.expect(responseData).to.have.property('is_approved');",
									"});",
									"",
									"",
									"pm.test(\"Validate the format of lat and lng\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  responseData.results.forEach(function(location) {",
									"    pm.expect(location.lat).to.be.a('number');",
									"    pm.expect(location.lng).to.be.a('number');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Results array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.results).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER}}/locations",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET RANDOM LOCATION",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id must be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Name should be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"City should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.city).to.be.a('string').and.to.have.lengthOf.at.least(1, \"City should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SERVER}}/random-location",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"random-location"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST LOCATION",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - name, lat, lng, and city\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('lat');",
									"    pm.expect(responseData).to.have.property('lng');",
									"    pm.expect(responseData).to.have.property('city');",
									"});",
									"",
									"",
									"pm.test(\"Latitude and longitude are within valid ranges\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    pm.expect(responseData.lat).to.be.within(-90, 90);",
									"    pm.expect(responseData.lng).to.be.within(-180, 180);",
									"});",
									"",
									"",
									"pm.test(\"City is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.city).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"City should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"lat\": 43.8522096, \"lng\": 18.3689508, \"city\": \"Sarajevo\", \"name\": \"Pomozi.ba\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVER}}/locations",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE LOCATION",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{SERVER}}/location/{{delete_location_id}}",
							"host": [
								"{{SERVER}}"
							],
							"path": [
								"location",
								"{{delete_location_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER}}/ok",
					"host": [
						"{{SERVER}}"
					],
					"path": [
						"ok"
					]
				},
				"description": "Health check"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "SERVER",
			"value": "https://asistentica.online/api",
			"type": "string",
			"disabled": true
		},
		{
			"key": "SERVER",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}